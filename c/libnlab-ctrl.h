#ifndef NLAB_CTRL_LIB_H
#define NLAB_CTRL_LIB_H

#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef const char const_char;

//#############//
//### Error ###//
//#############//

typedef enum {
    NLAB_CTRL_OK,
    NLAB_CTRL_ERR,
    NLAB_CTRL_ERR_NOT_FOUND
} nlab_ctrl_error_code;

typedef struct {
    nlab_ctrl_error_code code;
    char*                msg;
} nlab_ctrl_error;

nlab_ctrl_error* nlab_ctrl_error_new();
void             nlab_ctrl_error_set(nlab_ctrl_error* err, nlab_ctrl_error_code code, char* msg);
void             nlab_ctrl_error_print(nlab_ctrl_error* err);
void             nlab_ctrl_error_clear(nlab_ctrl_error* err);
void             nlab_ctrl_error_free(nlab_ctrl_error* err);

//############//
//### Ctrl ###//
//############//

typedef struct {
    const char* state_dir;
} nlab_ctrl_opts;

typedef struct {
    void* go_ptr;
} nlab_ctrl;

//#################//
//### StepMotor ###//
//#################//

typedef struct {
    char* id;
    char* name;
    int   step;
    int   min_step;
    int   max_step;
} nlab_ctrl_step_motor;

typedef nlab_ctrl_step_motor** nlab_ctrl_step_motors;

int                   nlab_ctrl_step_motors_size(nlab_ctrl_step_motors sms);
nlab_ctrl_step_motor* nlab_ctrl_step_motors_at_index(nlab_ctrl_step_motors sms, int index);
void                  nlab_ctrl_step_motors_free(nlab_ctrl_step_motors sms);

void nlab_ctrl_step_motor_free(nlab_ctrl_step_motor* sm);

//###########//
//### LED ###//
//###########//

typedef enum {
    NLAB_CTRL_STATUS_LED_OFF,
    NLAB_CTRL_STATUS_LED_ON,
    NLAB_CTRL_STATUS_LED_BLINKING
} nlab_ctrl_status_led_state;

typedef struct {
    char* id;
    char* name;
    bool  on;
    int   brightness;
    bool  strobe_on;
    int   strobe_delay; // Milliseconds
} nlab_ctrl_led;

typedef nlab_ctrl_led** nlab_ctrl_leds;

int            nlab_ctrl_leds_size(nlab_ctrl_leds leds);
nlab_ctrl_led* nlab_ctrl_leds_at_index(nlab_ctrl_leds leds, int index);
void           nlab_ctrl_leds_free(nlab_ctrl_leds leds);

void nlab_ctrl_led_free(nlab_ctrl_led* led);

//##############//
//### Switch ###//
//##############//

typedef struct {
    char* id;
    char* name;
    bool  on;
} nlab_ctrl_switch;

typedef nlab_ctrl_switch** nlab_ctrl_switches;

int               nlab_ctrl_switches_size(nlab_ctrl_switches sws);
nlab_ctrl_switch* nlab_ctrl_switches_at_index(nlab_ctrl_switches sws, int index);
void              nlab_ctrl_switches_free(nlab_ctrl_switches sws);

void nlab_ctrl_switch_free(nlab_ctrl_switch* sw);

#ifdef __cplusplus
}
#endif

#endif
/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package nlab/controller-libs */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "lib.go"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern nlab_ctrl* nlab_ctrl_open(const_char* backend_id, const_char* dev_path, nlab_ctrl_opts opts, nlab_ctrl_error* ctrl_err);
extern nlab_ctrl_step_motors nlab_ctrl_get_step_motors(nlab_ctrl* ctrl, nlab_ctrl_error* ctrl_err);
extern nlab_ctrl_step_motor* nlab_ctrl_get_step_motor(nlab_ctrl* ctrl, const_char* id, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_step_motor_rel_pos(nlab_ctrl* ctrl, const_char* id, int step, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_step_motor_abs_pos(nlab_ctrl* ctrl, const_char* id, int step, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_status_led(nlab_ctrl* ctrl, nlab_ctrl_status_led_state state, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_status_led_blinking_duration(nlab_ctrl* ctrl, long long int duration, nlab_ctrl_error* ctrl_err);
extern nlab_ctrl_leds nlab_ctrl_get_leds(nlab_ctrl* ctrl, nlab_ctrl_error* ctrl_err);
extern nlab_ctrl_led* nlab_ctrl_get_led(nlab_ctrl* ctrl, const_char* id, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_led(nlab_ctrl* ctrl, const_char* id, _Bool on, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_led_strobe(nlab_ctrl* ctrl, const_char* id, _Bool on, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_led_brightness(nlab_ctrl* ctrl, const_char* id, int brightness, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_led_strobe_delay(nlab_ctrl* ctrl, const_char* id, int delay, nlab_ctrl_error* ctrl_err);
extern nlab_ctrl_switches nlab_ctrl_get_switches(nlab_ctrl* ctrl, nlab_ctrl_error* ctrl_err);
extern nlab_ctrl_switch* nlab_ctrl_get_switch(nlab_ctrl* ctrl, const_char* id, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_set_switch(nlab_ctrl* ctrl, const_char* id, _Bool on, nlab_ctrl_error* ctrl_err);
extern float nlab_ctrl_temperature(nlab_ctrl* ctrl, nlab_ctrl_error* ctrl_err);
extern void nlab_ctrl_close(nlab_ctrl* ctrl);

#ifdef __cplusplus
}
#endif
